/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import vertexShader from "./shaders/vertex.glsl";
import fragmentShader from "./shaders/fragment.glsl";
import { uniform } from "three/examples/jsm/nodes/Nodes.js";

function Skull(props) {
  const { nodes, materials } = useGLTF("/models/skull.glb");

  const uniforms = {
    colorA: new THREE.Uniform(new THREE.Color("#f9b716")),
    colorB: new THREE.Uniform(new THREE.Color("#191919")),
    uTime: new THREE.Uniform(0),
  };

  const shaderMaterial = new THREE.ShaderMaterial({
    uniforms: uniforms,
    vertexShader,
    fragmentShader,
  });

  useFrame((state, delta) => {
    uniforms.uTime.value = state.clock.elapsedTime;
  });
  useEffect(() => {}, []);
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.bad_skull.geometry}
        material={nodes.bad_skull.material}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.065}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.eyes.geometry}
        material={shaderMaterial}
        position={[1.799, 2.764, 1.97]}
        scale={1.601}
      />
    </group>
  );
}

useGLTF.preload("/models/skull.glb");

export default Skull;
